From 159bdeb49f8b32796737bad7c6ba1041dc9f6483 Mon Sep 17 00:00:00 2001
From: Zan Dobersek <zdobersek@igalia.com>
Date: Fri, 7 Jun 2024 12:45:05 +0200
Subject: [PATCH] tu: ZPASS_DONE events with sample count writes can misbehave

On newer devices where ZPASS_DONE events have sample count writing
abilities the firmware expects these events to come in begin-end pairs,
essentially corresponding to a typical occlusion query usage. Since this
event is also used in the autotuner we have to avoid event pairs to be
emitted in an interleaved fashion.

To address this fully, the begin-point and end-point of both autotuner
and the occlusion query emit a ZPASS_DONE event pair, logically opening
and closing the sample count write. This adds some overhead and also
prevents optimizing sample count difference accumulation at the end of
the occlusion query, but ensures that these events don't misbehave.

Signed-off-by: Zan Dobersek <zdobersek@igalia.com>
---
 src/freedreno/vulkan/tu_autotune.cc | 30 +++++++++++++---
 src/freedreno/vulkan/tu_autotune.h  |  5 ++-
 src/freedreno/vulkan/tu_query.cc    | 56 ++++++++++++++++++++++-------
 3 files changed, 73 insertions(+), 18 deletions(-)

diff --git a/src/freedreno/vulkan/tu_autotune.cc b/src/freedreno/vulkan/tu_autotune.cc
index 734c35351e817..63a49b3f2fe49 100644
--- a/src/freedreno/vulkan/tu_autotune.cc
+++ b/src/freedreno/vulkan/tu_autotune.cc
@@ -653,7 +653,7 @@ tu_autotune_begin_renderpass(struct tu_cmd_buffer *cmd,
    static const uint32_t size = sizeof(struct tu_renderpass_samples);
 
    mtx_lock(&dev->autotune_mutex);
-   VkResult ret = tu_suballoc_bo_alloc(&autotune_result->bo, &dev->autotune_suballoc, size, size);
+   VkResult ret = tu_suballoc_bo_alloc(&autotune_result->bo, &dev->autotune_suballoc, size, 16);
    mtx_unlock(&dev->autotune_mutex);
    if (ret != VK_SUCCESS) {
       autotune_result->bo.iova = 0;
@@ -668,10 +668,24 @@ tu_autotune_begin_renderpass(struct tu_cmd_buffer *cmd,
 
    tu_cs_emit_regs(cs, A6XX_RB_SAMPLE_COUNT_CONTROL(.copy = true));
    if (cmd->device->physical_device->info->a7xx.has_event_write_sample_count) {
+      /* Emits of ZPASS_DONE events here in the autotuner and in the occlusion
+       * query implementation can intertwine, causing certain firmware versions
+       * to misbehave. To avoid this, a pair of events is emitted, the second
+       * event logically closing the first one. The second event writes into
+       * the samples_end location, but this will be overwritten with the proper
+       * end value in tu_autotune_end_renderpass.
+       */
+
       tu_cs_emit_pkt7(cs, CP_EVENT_WRITE7, 3);
       tu_cs_emit(cs, CP_EVENT_WRITE7_0(.event = ZPASS_DONE,
                                        .write_sample_count = true).value);
       tu_cs_emit_qw(cs, result_iova);
+
+      tu_cs_emit_pkt7(cs, CP_EVENT_WRITE7, 3);
+      tu_cs_emit(cs, CP_EVENT_WRITE7_0(.event = ZPASS_DONE,
+                                       .write_sample_count = true,
+                                       .sample_count_end_offset = true).value);
+      tu_cs_emit_qw(cs, result_iova);
    } else {
       tu_cs_emit_regs(cs,
                         A6XX_RB_SAMPLE_COUNT_ADDR(.qword = result_iova));
@@ -692,19 +706,27 @@ void tu_autotune_end_renderpass(struct tu_cmd_buffer *cmd,
    if (!autotune_result->bo.iova)
       return;
 
-   uint64_t result_iova = autotune_result->bo.iova;
+   uint64_t result_iova = autotune_result->bo.iova +
+      offsetof(struct tu_renderpass_samples, samples_end);
 
    tu_cs_emit_regs(cs, A6XX_RB_SAMPLE_COUNT_CONTROL(.copy = true));
 
    if (cmd->device->physical_device->info->a7xx.has_event_write_sample_count) {
+      /* Again, to avoid ZPASS_DONE interference between autotuner and occlusion
+       * queries, we emit a pair of these events, the second one logically closing
+       * the first one through the sample_count_end_offset bit.
+       */
+      tu_cs_emit_pkt7(cs, CP_EVENT_WRITE7, 3);
+      tu_cs_emit(cs, CP_EVENT_WRITE7_0(.event = ZPASS_DONE,
+                                       .write_sample_count = true).value);
+      tu_cs_emit_qw(cs, result_iova);
+
       tu_cs_emit_pkt7(cs, CP_EVENT_WRITE7, 3);
       tu_cs_emit(cs, CP_EVENT_WRITE7_0(.event = ZPASS_DONE,
                                        .write_sample_count = true,
                                        .sample_count_end_offset = true).value);
       tu_cs_emit_qw(cs, result_iova);
    } else {
-      result_iova += offsetof(struct tu_renderpass_samples, samples_end);
-
       tu_cs_emit_regs(cs,
                         A6XX_RB_SAMPLE_COUNT_ADDR(.qword = result_iova));
       tu_cs_emit_pkt7(cs, CP_EVENT_WRITE, 1);
diff --git a/src/freedreno/vulkan/tu_autotune.h b/src/freedreno/vulkan/tu_autotune.h
index c374e86ab8945..e00dc6d1b04ae 100644
--- a/src/freedreno/vulkan/tu_autotune.h
+++ b/src/freedreno/vulkan/tu_autotune.h
@@ -95,7 +95,10 @@ struct PACKED tu_renderpass_samples {
    /* hw requires the sample start/stop locations to be 128b aligned. */
    uint64_t __pad0;
    uint64_t samples_end;
-   uint64_t __pad1;
+   /* This padding is extended due to ZPASS_DONE sample count writes in
+    * tu_autotune_end_renderpass.
+    */
+   uint64_t __pad1[3];
 };
 
 /* Necessary when writing sample counts using CP_EVENT_WRITE7::ZPASS_DONE. */
diff --git a/src/freedreno/vulkan/tu_query.cc b/src/freedreno/vulkan/tu_query.cc
index fc90a010064e5..2a6fba3bbdd34 100644
--- a/src/freedreno/vulkan/tu_query.cc
+++ b/src/freedreno/vulkan/tu_query.cc
@@ -37,7 +37,10 @@ struct PACKED occlusion_query_slot {
    uint64_t begin;
    uint64_t result;
    uint64_t end;
-   uint64_t _padding1;
+   /* This padding is extended due to ZPASS_DONE sample count writes in
+    * emit_end_occlusion_query.
+    */
+   uint64_t _padding1[3];
 };
 
 struct PACKED timestamp_query_slot {
@@ -876,10 +879,23 @@ emit_begin_occlusion_query(struct tu_cmd_buffer *cmdbuf,
          tu_cs_emit(cs, CCU_CLEAN_DEPTH);
       }
    } else {
+      /* Emits of ZPASS_DONE events here in the occlusion query implementation
+       * and in the autotuner can intertwine, causing certain firmware versions
+       * to misbehave. To avoid this, a pair of events is emitted, the second
+       * event logically closing the first one. The second event writes into
+       * the end location, but this will be overwritten with the proper end
+       * value in emit_end_occlusion_query.
+       */
       tu_cs_emit_pkt7(cs, CP_EVENT_WRITE7, 3);
       tu_cs_emit(cs, CP_EVENT_WRITE7_0(.event = ZPASS_DONE,
                                        .write_sample_count = true).value);
       tu_cs_emit_qw(cs, begin_iova);
+
+      tu_cs_emit_pkt7(cs, CP_EVENT_WRITE7, 3);
+      tu_cs_emit(cs, CP_EVENT_WRITE7_0(.event = ZPASS_DONE,
+                                       .write_sample_count = true,
+                                       .sample_count_end_offset = true).value);
+      tu_cs_emit_qw(cs, begin_iova);
    }
 }
 
@@ -1188,12 +1204,28 @@ emit_end_occlusion_query(struct tu_cmd_buffer *cmdbuf,
          tu_cs_emit(cs, CCU_CLEAN_DEPTH);
       }
    } else {
+      /* Again, to avoid ZPASS_DONE interference between occlusion query and
+       * autotuner, we emit a pair of these events, the second one logically
+       * closing the first one through the sample_count_end_offset bit.
+       */
+      tu_cs_emit_pkt7(cs, CP_EVENT_WRITE7, 3);
+      tu_cs_emit(cs, CP_EVENT_WRITE7_0(.event = ZPASS_DONE,
+                                       .write_sample_count = true).value);
+      tu_cs_emit_qw(cs, end_iova);
+
       tu_cs_emit_pkt7(cs, CP_EVENT_WRITE7, 3);
       tu_cs_emit(cs, CP_EVENT_WRITE7_0(.event = ZPASS_DONE,
                                        .write_sample_count = true,
-                                       .sample_count_end_offset = true,
-                                       .write_accum_sample_count_diff = true).value);
-      tu_cs_emit_qw(cs, begin_iova);
+                                       .sample_count_end_offset = true).value);
+      tu_cs_emit_qw(cs, end_iova);
+
+      /* This WFI is needed before proceeding with memory operations. If
+       * ZPASS_DONE workarounds weren't necessary, we could rely on the
+       * sample count difference accumulation done through ZPASS_DONE itself,
+       * removing the need for the subsequent memory polling and accumulation
+       * done through CP_MEM_TO_MEM.
+       */
+      tu_cs_emit_wfi(cs);
    }
 
    tu_cs_emit_pkt7(cs, CP_WAIT_REG_MEM, 6);
@@ -1204,15 +1236,13 @@ emit_end_occlusion_query(struct tu_cmd_buffer *cmdbuf,
    tu_cs_emit(cs, CP_WAIT_REG_MEM_4_MASK(~0));
    tu_cs_emit(cs, CP_WAIT_REG_MEM_5_DELAY_LOOP_CYCLES(16));
 
-   if (!cmdbuf->device->physical_device->info->a7xx.has_event_write_sample_count) {
-      /* result (dst) = result (srcA) + end (srcB) - begin (srcC) */
-      tu_cs_emit_pkt7(cs, CP_MEM_TO_MEM, 9);
-      tu_cs_emit(cs, CP_MEM_TO_MEM_0_DOUBLE | CP_MEM_TO_MEM_0_NEG_C);
-      tu_cs_emit_qw(cs, result_iova);
-      tu_cs_emit_qw(cs, result_iova);
-      tu_cs_emit_qw(cs, end_iova);
-      tu_cs_emit_qw(cs, begin_iova);
-   }
+   /* result (dst) = result (srcA) + end (srcB) - begin (srcC) */
+   tu_cs_emit_pkt7(cs, CP_MEM_TO_MEM, 9);
+   tu_cs_emit(cs, CP_MEM_TO_MEM_0_DOUBLE | CP_MEM_TO_MEM_0_NEG_C);
+   tu_cs_emit_qw(cs, result_iova);
+   tu_cs_emit_qw(cs, result_iova);
+   tu_cs_emit_qw(cs, end_iova);
+   tu_cs_emit_qw(cs, begin_iova);
 
    tu_cs_emit_pkt7(cs, CP_WAIT_MEM_WRITES, 0);
 
-- 
GitLab

